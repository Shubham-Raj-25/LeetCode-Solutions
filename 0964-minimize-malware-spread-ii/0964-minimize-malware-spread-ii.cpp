class Solution {
private:
    int findUPar(int u, vector<int>& par){
        if(par[u] == u) 
            return u;
        return par[u] = findUPar(par[u],par);
    }

    void joinBySize(int u, int v, vector<int>& par, vector<int>& size){
        int pu = findUPar(u,par);
        int pv = findUPar(v,par);
        
        if(pu == pv)
            return;
        if(size[pu] > size[pv]){
            par[pv] = pu;
            size[pu] += size[pv];
        }else{
            par[pu] = pv;
            size[pv] += size[pu];
        }
    }

public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        // as n < 300, why not try brute force?

        int n = graph.size();
        int m = initial.size();
        int min_infected = 1000;
        int ans;

        sort(initial.begin(),initial.end());

        if(m == 1)
            return initial[0];

        for(int k=0;k<m;k++){
            cout << "Removing: " << initial[k] << endl;
            vector<int> par(n), size(n,1);
            for(int i=0;i<n;i++)
                par[i] = i;
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(i != initial[k] && j != initial[k] && graph[i][j])
                        joinBySize(i,j,par,size);
                }
            }
            
            unordered_set<int> uPars;
            for(int a = 0; a < m; a++)
                if(a != k)
                    uPars.insert(findUPar(initial[a],par));
            
            int infected = 0;

            for(int o : uPars)
                infected += size[o];

            cout << "parent array is : " << endl;
            for(auto it: par)
                cout << it << " ";
            cout << endl << "size array is : " << endl;
            for(auto it: size)
                cout << it << " ";
            
            cout << endl<< "no of infected: " << infected << endl;
            if(infected < min_infected){
                min_infected = infected;
                ans = initial[k];
            }
        }

        return ans;

    }
};